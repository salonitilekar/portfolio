---
import type { HeroProps } from "@types";
type Props = HeroProps;

const { name, specialty, summary, email } = Astro.props;
---

<section class="py-24 md:py-32" id="#hero">
  <!-- Photo positioned absolutely on the left -->
  <div class="absolute left-32 top-1/3 transform -translate-y-1/2 z-10 hidden lg:block">
    <div class="relative">
      <img
        src="/saloni-photo.jpg"
        alt="Saloni Tilekar"
        class="w-40 h-40 md:w-56 md:h-56 rounded-full object-cover border-3 shadow-lg photo-border"
      />
      
      <!-- Thought Bubble -->
      <div class="thought-bubble">
        <div class="bubble-text">currently dreaming</div>
        <div class="bubble-dots">
          <div class="dot"></div>
          <div class="dot"></div>
          <div class="dot"></div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="flex flex-col items-center gap-8 md:flex-row md:items-start md:gap-12">
    <!-- Name and specialty on the right -->
    <div class="flex-1 text-center md:text-left">
      <h1
        class="mb-1.5 font-serif text-7xl font-bold tracking-tightest sm:text-8xl md:mb-0 md:text-9xl typewriter-text"
        style="color: var(--color-text);"
        data-text="Saloni Tilekar"
      >
        <span class="typed-text"></span><span class="cursor-block"></span>
      </h1>
      <p
        class="mb-9 font-serif text-4xl leading-[46px] font-bold tracking-tighter sm:text-5xl md:text-6xl"
        style="color: var(--color-primary);"
      >
        {specialty}
      </p>
      
      <!-- Location -->
      <div class="flex items-center justify-center md:justify-start gap-2 mb-8">
        <svg 
          class="w-4 h-4" 
          fill="currentColor" 
          viewBox="0 0 20 20" 
          style="color: var(--color-neutral);"
        >
          <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
        </svg>
        <span 
          class="text-sm font-medium"
          style="color: var(--color-neutral);"
        >
          San Francisco
        </span>
      </div>
    </div>
  </div>
  
  <p class="mb-16 text-base font-normal md:text-lg mt-8" style="color: var(--color-neutral);">
    {summary}
  </p>

  <a
    id="glass-btn"
    class="group relative inline-flex items-center gap-2 rounded-full px-8 py-4 text-sm font-medium transition-all duration-500 hover:scale-105 active:scale-95 glass-btn-light"
    href={`mailto:${email}`}
  >
    <span class="relative z-10">Get in Touch</span>
    <div class="absolute inset-0 rounded-full bg-gradient-to-r from-white/40 via-white/10 to-white/40 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none"></div>
    <div class="absolute inset-0 rounded-full pointer-events-none glass-btn-shine"></div>
  </a>
  <script>
    function updateGlassBtnTheme() {
      const btn = document.getElementById('glass-btn');
      if (!btn) return;
      const theme = document.documentElement.getAttribute('data-theme');
      btn.classList.remove('glass-btn-light', 'glass-btn-dark');
      btn.classList.add(theme === 'dark' ? 'glass-btn-dark' : 'glass-btn-light');
    }
    updateGlassBtnTheme();
    window.addEventListener('storage', updateGlassBtnTheme);
    window.addEventListener('DOMContentLoaded', updateGlassBtnTheme);
    window.addEventListener('themechange', updateGlassBtnTheme);
    // Also listen for theme toggle button
    const observer = new MutationObserver(updateGlassBtnTheme);
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['data-theme'] });
    
    // Typewriter effect
    function typeWriter() {
      const textElement = document.querySelector('.typed-text') as HTMLElement;
      const text = "saloni tilekar";
      const speed = 150; // ms per character
      let i = 0;
      
      function typeChar() {
        if (i < text.length && textElement) {
          textElement.textContent += text.charAt(i);
          i++;
          setTimeout(typeChar, speed);
        } else {
          // Stop at the last character, don't move to next line
          // Clear text and restart after a pause
          setTimeout(() => {
            if (textElement) {
              textElement.textContent = '';
              i = 0;
              typeChar();
            }
          }, 2000); // 2 second pause before restarting
        }
      }
      
      typeChar();
    }
    
    // Start typewriter effect when page loads
    document.addEventListener('DOMContentLoaded', typeWriter);
  </script>
  <style>
    .glass-btn-light {
      background: rgba(255,255,255,0.6);
      box-shadow: 0 8px 48px 0 rgba(0,0,0,0.15), 0 4px 16px 0 rgba(0,0,0,0.1);
      border: 1.5px solid rgba(0,0,0,0.08);
      color: var(--color-text);
    }
    .glass-btn-dark {
      background: rgba(30,30,30,0.7);
      border: 1.5px solid rgba(255,255,255,0.12);
      color: #fff;
    }
    .glass-btn-light .glass-btn-shine {
      background: linear-gradient(180deg,rgba(255,255,255,0.25) 0%,rgba(255,255,255,0.05) 60%,rgba(255,255,255,0) 100%);
      mix-blend-mode: screen;
    }
    .glass-btn-dark .glass-btn-shine {
      background: linear-gradient(180deg,rgba(255,255,255,0.18) 0%,rgba(255,255,255,0.04) 60%,rgba(255,255,255,0) 100%);
      mix-blend-mode: screen;
    }
    
    /* Photo border theme styles */
    .photo-border {
      border-color: #333333; /* Default light theme border */
    }
    
    [data-theme="dark"] .photo-border {
      border-color: #ffffff; /* Dark theme border */
    }
    
    /* Thought Bubble Styles */
    .thought-bubble {
      position: absolute;
      top: -20px;
      right: -20px;
      background: var(--color-bg);
      border: 2px solid var(--color-text);
      border-radius: 20px;
      padding: 8px 12px;
      font-size: 12px;
      font-weight: 500;
      white-space: nowrap;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      z-index: 10;
      animation: float 3s ease-in-out infinite;
    }
    
    .bubble-text {
      color: var(--color-text);
      margin-bottom: 4px;
    }
    
    .bubble-dots {
      display: flex;
      gap: 3px;
      justify-content: center;
    }
    
    .dot {
      width: 4px;
      height: 4px;
      background: var(--color-text);
      border-radius: 50%;
      opacity: 0.6;
    }
    
    .dot:nth-child(1) { animation: pulse 2s ease-in-out infinite; }
    .dot:nth-child(2) { animation: pulse 2s ease-in-out infinite 0.3s; }
    .dot:nth-child(3) { animation: pulse 2s ease-in-out infinite 0.6s; }
    
    @keyframes float {
      0%, 100% { transform: translateY(0px); }
      50% { transform: translateY(-5px); }
    }
    
    @keyframes pulse {
      0%, 100% { opacity: 0.6; transform: scale(1); }
      50% { opacity: 1; transform: scale(1.2); }
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .thought-bubble {
        top: -15px;
        right: -15px;
        padding: 6px 10px;
        font-size: 11px;
      }
    }
    
    /* Typewriter Animation Styles */
    .typewriter-text {
      font-family: 'Courier New', 'Consolas', 'Monaco', monospace;
      font-weight: normal;
      letter-spacing: 0.5px;
      color: var(--color-text) !important;
      white-space: nowrap;
      overflow: hidden;
    }
    
    .cursor-block {
      display: inline-block;
      width: 0.6em;
      height: 0.9em;
      background-color: var(--color-text) !important;
      animation: blink 1s step-start infinite;
      vertical-align: baseline;
      margin-left: 2px;
      position: relative;
      top: 0;
    }
    
    @keyframes blink {
      50% { opacity: 0; }
    }
    
    .typed-text {
      white-space: nowrap;
      overflow: hidden;
      display: inline-block;
    }
  </style>
</section>
